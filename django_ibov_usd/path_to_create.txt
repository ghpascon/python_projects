Instalar Django


Abra um terminal ou prompt de comando e instale o Django usando o pip:

pip install django



rode o app django_create ou:

 Criar um projeto Django

Crie um novo diretório para o seu projeto e navegue até ele no terminal.
Execute o seguinte comando para criar um novo projeto Django:

django-admin startproject nomedoseuprojeto




Criar um aplicativo Django

Navegue até o diretório do seu projeto criado anteriormente.

cd nomedoseuprojeto

Execute o seguinte comando para criar um novo aplicativo dentro do seu projeto:

python manage.py startapp nomedoaplicativo






Rota(urls.py) -> views.py -> html

urls.py ->
from django.urls import path
from app_register import views
urlpatterns = [
    #rota, viwe, referencia
    path('', views.home, name= 'home'),#home
    path('register/', views.save_product, name= 'register_page'),#register
]

views.py->
from django.shortcuts import render
from .models import product_info

def home(request):
    return render(request, 'register/home.html')

def save_product(request):
    #salva os dados
    new_product = product_info()
    new_product.product_name = request.POST.get('product_name')
    new_product.product_color = request.POST.get('product_color')
    new_product.product_size = request.POST.get('product_size')
    new_product.product_amount = request.POST.get('product_amount')
    new_product.save()
    #exibir os dados
    products={
    'products': product_info.objects.all()
    }
    #retornar os dados para página de listar
    return render(request, 'register/product_list.html', products)


criar a pasta templates dentro do app->
dentro de templates criar uma pasta para o html ex: usuarios ->
dentro dessa nova pasta criar um arquivo html home.html ->
pesquisar por templates no bootstrap 5 ->
estrutura do html->
(https://getbootstrap.com/docs/5.0/getting-started/introduction/) ->




registrar app no projeto->
settings.py->
INSTALLED_APPS->
'nome_do_aplicativo'




colocar dentro do html->
header->
<!doctype html>
<html lang="en">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">

    <title>register</title>
  </head>
  <body>
    <nav style="background-color: rgb(180, 1, 1) !important;" class="navbar navbar-light bg-light">
        <div class="container-fluid">
            <span class="navbar-brand mb-0 h1"><a style="text-decoration: none;color: rgb(0, 0, 0)" href="{% url 'home' %}">HOME!</a></span>
        </div>
        <h1> </h1>
    </nav>
    {% block page %}


    
    {% endblock %}
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>
  </body>
</html>



home->
{% extends 'register/header_home.html' %}
{% block page %}
<form action="{% url 'register_page' %}" method="post">
  {% csrf_token %}
  <div style="text-align: left;" class="container">
      <h1>Register Product</h1>
      <br>Name of Product:<br> <input name="product_name" class="form-control-sm" type="text">
      <br>Color:<br> <input name="product_color" class="form-control-sm" type="text">
      <br>Size:<br> <input name="product_size" class="form-control-sm" type="text">
      <br>Amount:<br> <input name="product_amount" class="form-control-sm" type="text">
      <br><button class="form-control-sm">Register</button>
  </div>
</form>
{% endblock %}

product_list->
{% extends 'register/header_home.html' %}
{% block page %}
<form action="{% url 'register_page' %}" method="post">
  {% csrf_token %}
  <div style="text-align: left;" class="container">
      <h1>Register Product</h1>
      <br>Name of Product:<br> <input name="product_name" class="form-control-sm" type="text">
      <br>Color:<br> <input name="product_color" class="form-control-sm" type="text">
      <br>Size:<br> <input name="product_size" class="form-control-sm" type="text">
      <br>Amount:<br> <input name="product_amount" class="form-control-sm" type="text">
      <br><button class="form-control-sm">Register</button>
  </div>
</form>
{% endblock %}






estrutura do banco de dados->
models.py->
from django.db import models

class product_info(models.Model):
    product_id = models.AutoField(primary_key=True)
    product_name = models.TextField(max_length=255)
    product_color = models.TextField(max_length=255)
    product_size = models.TextField(max_length=255)
    product_amount = models.IntegerField()

    
views.py->
from django.shortcuts import render
from .models import product_info

def home(request):
    return render(request, 'register/home.html')

def save_product(request):
    #salva os dados
    new_product = product_info()
    new_product.product_name = request.POST.get('product_name')
    new_product.product_color = request.POST.get('product_color')
    new_product.product_size = request.POST.get('product_size')
    new_product.product_amount = request.POST.get('product_amount')
    new_product.save()
    #exibir os dados
    products={
    'products': product_info.objects.all()
    }
    #retornar os dados para página de listar
    return render(request, 'register/product_list.html', products)



fazer imigracao para o banco de dados->
python manage.py makemigrations
python manage.py migrate



python manage.py runserver


para rodar na rede 
settings.py->
ALLOWED_HOSTS = ['ip_da_maquina', '127.0.0.1']

python manage.py runserver 0.0.0.0:8000
















from pathlib import Path
import socket

# Função para obter o endereço IP local da máquina
def get_local_ip():
    try:
        # Cria um socket UDP
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))  # Conecta a um servidor externo
        local_ip = s.getsockname()[0]  # Obtém o endereço IP local
        s.close()
        return local_ip
    except socket.error:
        return None

# Obtém o endereço IP local
local_ip = get_local_ip()

# Verifica se o endereço IP local foi obtido com sucesso
if local_ip:
    # Adiciona o endereço IP local à lista de ALLOWED_HOSTS
    ALLOWED_HOSTS = [local_ip, '127.0.0.1']
    print("Endereço IP local adicionado à lista ALLOWED_HOSTS:", local_ip)
else:
    # Se não foi possível obter o endereço IP local, usa '127.0.0.1' como padrão
    ALLOWED_HOSTS = ['127.0.0.1']
    print("Não foi possível obter o endereço IP local. Usando '127.0.0.1' como padrão.")


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-&0+m31@s2ziku9k5f*w96h93d4%4*)*9%_a3z2o4(u%u9$^m#6'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'app_register'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'project_register.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project_register.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

